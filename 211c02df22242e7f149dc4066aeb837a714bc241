{
  "comments": [
    {
      "key": {
        "uuid": "dabed58f_8352f211",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 191
      },
      "writtenOn": "2017-02-15T07:55:31Z",
      "side": 1,
      "message": "personally I regard vm as a part of openstack cloud. ...APIs between vm and openstack cloud looks ambiguous.",
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_03092231",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-02-15T12:32:23Z",
      "side": 1,
      "message": "The position in this paper is that the OpenStack Cloud is a \"platform\" hosting the \"application\" VMs.   So these APIs between vm and openstack cloud are analogous to APIs between an Application and its Platform.",
      "parentUuid": "dabed58f_8352f211",
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1acb0d3e_43487c2d",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 402
      },
      "writtenOn": "2017-02-08T15:04:09Z",
      "side": 1,
      "message": "Please explain the difference to the notifications in doctor project.\nI suggest to ask the doctor project to review.\n\nIn general I get a bit confused between the role of these functions and the role of the VNFM. Maybe it gets more clear when I can look at the pictures.",
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_321116ad",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-02-14T13:49:56Z",
      "side": 1,
      "message": "These notifications are the OpenStack Host notifying a Guest VM that an event (such as stop, pause, migrate, etc) is about to be executed on it.   This gives the VM an opportunity to reject the request (e.g. if not in-sync with a peer standby VM ) or to simply gracefully prepare for the event (e.g. close files etc).\n\nI believe the DOCTOR notifications are at a much higher level ... e.g. NOVA, NEUTRON, CINDER creating notifications of state changes to virtual resources such that a local VIM or remote VNFM can initiate recovery action.",
      "parentUuid": "1acb0d3e_43487c2d",
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_74b6838c",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 314
      },
      "writtenOn": "2017-02-23T08:07:00Z",
      "side": 1,
      "message": "I think these is some misunderstanding here. Probably because the entry here is a little bit misleading. The event notification here does not mean VM notify the guest os or the MANO, but indicates the other way round. I suggest to change this entry as \"Infrustructure event notification and VM ack\"",
      "parentUuid": "1acb0d3e_43487c2d",
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_afb6e2da",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-02-23T16:42:55Z",
      "side": 1,
      "message": "Agree ... i\u0027ll make the notification direction more clear.",
      "parentUuid": "dabed58f_74b6838c",
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1acb0d3e_a35e00e8",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 402
      },
      "writtenOn": "2017-02-08T15:04:09Z",
      "side": 1,
      "message": "I think resource scaling in NFV must be triggered by the VNFM. How will the VNFM be involved?",
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_d2251a0b",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-02-14T13:49:56Z",
      "side": 1,
      "message": "Agree having VNFM trigger Resource Scaling at a high-level, is one scenario.   Using Heat policy-driven resource scaling is another high-level scenario.\n\nAgain, this document is talking about VM Resource Scaling at a lower level ... i.e. the OpenStack-Host - to - Guest-VM messaging required to realize resource scaling.\n\nIn our implementation, this OpenStack-Host - to - Guest-VM API for realizing Resource Scaling is used by a NOVA extension to request a resource scale up or scale down.  \ne.g.      % nova scale \u003cinstance_UUID\u003e cpu up\n            % nova scale \u003cinstance_UUID\u003e cpu down\n\nThis command can be triggered by either VNFM or HEAT Scaling Policy.\n\nAnd then this command leverages the HOST-to-GUEST API for Resource Scaling to inform the Guest of the Resource Scaling.",
      "parentUuid": "1acb0d3e_a35e00e8",
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_5dfffb01",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 830
      },
      "writtenOn": "2017-02-14T15:23:16Z",
      "side": 1,
      "message": "In reading a separate email response to this, I saw that Greg indicated that a Host could be any of VNFM, or VIM, or HEAT - so my comments are taken from that perspective. \n\nFrom an OPNFV perspective, I think we must at least recommend how we propose it be used (e.g., just by the VNFM). It could still be implemented in such a way on the guest as to be indifferent to the consumer.\n\nSo from that perspective, two things are needed: 1) an overview of how it is intended to be used from an NFV perspective, and 2) perhaps change terminology throughout so that the owner of the resource management policies is the identified consumer, and the \"OpenStack Host\" is merely the conduit for providing access via the messaging service.",
      "parentUuid": "dabed58f_d2251a0b",
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_1e09792c",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-02-15T12:32:23Z",
      "side": 1,
      "message": "Yeah agree that the next \u0027iteration\u0027 of the Overview Document needs to \"bring it up a level\" even more, since a general theme of the comments / questions is wrt understanding who the consumer of these capabilities / APIs would be and how these capabilities / APIs would integrate into the OpenStack / OPNFV / MANO architecture.\n\nI wouldn\u0027t go into tons of details ... maybe just a functional architecture diagram for each of the APIs, showing the consumer in the overall OpenStack / OPNFV / MANO  architecture and a paragraph or two describing the diagram.",
      "parentUuid": "dabed58f_5dfffb01",
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_d44f2f91",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 314
      },
      "writtenOn": "2017-02-23T08:07:00Z",
      "side": 1,
      "message": "Greg. I think some explaination should be made here. I think the HA API is kind of misleading. People may consider the VM directly uses these APIs and get the info that they need. However from your reply above, I see that the NFVO and VNFM are the entities that use these. The NFVO and VNFM use the nova restful API to trigger certain action, and the nova proxy kidnaps these command, trigger some interaction between the host and VM using these API, then give the command back to the real nova. (don\u0027t know if I understand right about these). if so, I think we may not call these as API but rather should be message flow between VM and the host OS.\nfor each entry listed above, I suggest to add a short explaination or example about how to use the capability by NFVO and VNFM.",
      "parentUuid": "dabed58f_1e09792c",
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_cfbb16c3",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-02-23T16:42:55Z",
      "side": 1,
      "message": "As discussed in meeting, the immediately following sections will be expanded to provide the high-level context of how the Host - to - VM messaging is integrated into the overall MANO / NFV / OpenStack solution.\n\nI will also figure out how to address your first point on possible confusion of referring to this overall work as HA Guest APIs when this document is morphing into a slightly larger scope in order to better describe how this Host - to - VM Messaging is integrated into overall MANO / NFV / OpenStack solution in order to provide Higher Availability.",
      "parentUuid": "dabed58f_d44f2f91",
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_545b3f54",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 314
      },
      "writtenOn": "2017-02-23T08:07:00Z",
      "side": 1,
      "message": "which entity should use this API. Is it nova or nova proxy? my understanding is the API is used by nova or nova proxy, to indicate the daemon to work and reply to nova about the health of the VM. Am I right?",
      "range": {
        "startLine": 52,
        "startChar": 1,
        "endLine": 52,
        "endChar": 35
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_6fb0eadd",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-02-23T16:42:55Z",
      "side": 1,
      "message": "we can discuss ... for the heartbeating and health checking, my view is that the Vitrage component of DOCTOR would leverage this API in order to detect an internal VM fault ... and then do the normal DOCTOR handling of this to update NOVA VM state based on this, trigger Notifications thru AODH which would in-turn trigger either local or remote recovery.\n\nThis high-level context of how the heartbeating / health checking integrates into overall solution is the primary update that i will do next to this document.\n\n( The Nova Proxy design is only required by the Event Notification and ACK functionality ... next section )",
      "parentUuid": "dabed58f_545b3f54",
      "range": {
        "startLine": 52,
        "startChar": 1,
        "endLine": 52,
        "endChar": 35
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_c3478a4a",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 191
      },
      "writtenOn": "2017-02-15T07:55:31Z",
      "side": 1,
      "message": "It might be more clear to say: This API provides a capability for guest application within a VM to report its health status to a heartbeat service running in a Openstack compute node.",
      "range": {
        "startLine": 59,
        "startChar": 2,
        "endLine": 60,
        "endChar": 64
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_3e0ebd35",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-02-15T12:32:23Z",
      "side": 1,
      "message": "Agreed ... i\u0027ll re-word in next iteration of document.",
      "parentUuid": "dabed58f_c3478a4a",
      "range": {
        "startLine": 59,
        "startChar": 2,
        "endLine": 60,
        "endChar": 64
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_3d2567ab",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 830
      },
      "writtenOn": "2017-02-14T15:23:16Z",
      "side": 1,
      "message": "Perhaps I\u0027m misunderstanding, but I would expect this to be specified by the VM owner, like a VNFM, and not the VM. If the VNFM expects one behavior, but the VM has changed itself to use a different behavior, that can lead to divergent, and potentially out of sync, resource management behavior. At the very least, this should identify that this is optional so that, if not configured, then the heartbeat service is not run. I think this is implied, but please call it out. Indeed, I think this is actually a compute host service that should be configured through Nova as part of creating a VM.",
      "range": {
        "startLine": 62,
        "startChar": 39,
        "endLine": 64,
        "endChar": 70
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_de120158",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-02-15T12:32:23Z",
      "side": 1,
      "message": "Yes ... i think in the next iteration of the Overview Document when i add in the context of the consumer and integration into OpenStack / OPNFV / MANO, this information will be covered.\n\nIn our own implementation, this is indeed optional.  Heartbeating of a VM is specified thru a flavour extra-spec ... which could indeed be specified by the VNFM owning the VM.",
      "parentUuid": "dabed58f_3d2567ab",
      "range": {
        "startLine": 62,
        "startChar": 39,
        "endLine": 64,
        "endChar": 70
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_1d574304",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 830
      },
      "writtenOn": "2017-02-14T15:23:16Z",
      "side": 1,
      "message": "I like the idea of a super-efficient guest heartbeat running on the host. But I wonder, as in my previous comment, since it is a service that should be configured by the VM owner, is it something better implemented as a Nova service configured as part of VM deployment?",
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_5e2611bc",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-02-15T12:32:23Z",
      "side": 1,
      "message": "Yes, i\u0027ll cover that in the integration into OpenStack / OPNFV / MANO that i\u0027ll add ... as mentioned the Heartbeat Service is configured thru a Nova Flavor extra spec as part of VM deployment.",
      "parentUuid": "dabed58f_1d574304",
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_9449b78d",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 314
      },
      "writtenOn": "2017-02-23T08:07:00Z",
      "side": 1,
      "message": "this corrective action should be override by the VM or the VNFM?\nI think the VNFM should do such decision. or at least the VNFM should have such capability",
      "range": {
        "startLine": 88,
        "startChar": 30,
        "endLine": 89,
        "endChar": 40
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_cfe236d5",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-02-23T16:42:55Z",
      "side": 1,
      "message": "Agree ... that VNFM should be able to override this in the overall solution.",
      "parentUuid": "dabed58f_9449b78d",
      "range": {
        "startLine": 88,
        "startChar": 30,
        "endLine": 89,
        "endChar": 40
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1acb0d3e_31925658",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1334
      },
      "writtenOn": "2017-02-09T11:20:10Z",
      "side": 1,
      "message": "Who is the user of the API? Starting and stopping VMs is already done by OpenStack. Will this be integrated?",
      "range": {
        "startLine": 113,
        "startChar": 46,
        "endLine": 114,
        "endChar": 32
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_72654e44",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-02-14T13:49:56Z",
      "side": 1,
      "message": "Yes all of these events are currently events that are managed by NOVA.\n\nThe user of this API (i.e. to have the HOST inform the Guest of these events) could be NOVA itself or a NOVA PROXY.\n\nIn our implementation, we use a NOVA PROXY in order to minimize / eliminate changes required in NOVA itself.  i.e. the NOVA PROXY takes over the NOVA REST API port and intercepts all commands in order to leverage this HOST-to-GUEST API to inform the VM of the event that is about to occur to it, give the VM a chance to reject the command, and then (depending on outcome) forwards the command on to  the real NOVA.",
      "parentUuid": "1acb0d3e_31925658",
      "range": {
        "startLine": 113,
        "startChar": 46,
        "endLine": 114,
        "endChar": 32
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_dd676be9",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 158,
      "author": {
        "id": 830
      },
      "writtenOn": "2017-02-14T15:23:16Z",
      "side": 1,
      "message": "Sorry, M\u0026O is not a democracy. (Well, maybe sometimes in clusters, but not in this case.) M\u0026O in these environments absolutely rely on a top-down command and control infrastructure to ensure that there is one view of how resources are utilized in the infrastructure. So, the option to vote, or to reject, actions, simply does not work in the long run.",
      "range": {
        "startLine": 155,
        "startChar": 3,
        "endLine": 158,
        "endChar": 22
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_0365a2e0",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 158,
      "author": {
        "id": 191
      },
      "writtenOn": "2017-02-15T07:55:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dabed58f_dd676be9",
      "range": {
        "startLine": 155,
        "startChar": 3,
        "endLine": 158,
        "endChar": 22
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_3e255dab",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 158,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-02-15T12:32:23Z",
      "side": 1,
      "message": "The USE CASE here is that the we are providing a mechanism for the Guest VM to warn the OpenStack Platform that this operation will cause issues with the Guest.\n\nDefinitely the OpenStack Platform has the capability to \"force\" the operation and ignore the warning from the Guest.",
      "parentUuid": "dabed58f_dd676be9",
      "range": {
        "startLine": 155,
        "startChar": 3,
        "endLine": 158,
        "endChar": 22
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_f457d324",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 158,
      "author": {
        "id": 314
      },
      "writtenOn": "2017-02-23T08:07:00Z",
      "side": 1,
      "message": "I think there should be a scheme to notify the nova proxy which operation is strong and should be forced without consideration of the VM, and which operation can be postponed and wait for the VM to prepare smoothly.So there could be 3 situations.\n1) the action is not urgent, nova proxy asks the vm to vote and the VM agrees to take the action\n2) the action is not urgent, nova proxy asks the vm to vote, the vm rejects the action. nova proxy hand the action to nova after the vm finishes preparing\n3) the action is urgent. nova proxy directly hands this action to nova without asking the vm to vote.",
      "parentUuid": "dabed58f_3e255dab",
      "range": {
        "startLine": 155,
        "startChar": 3,
        "endLine": 158,
        "endChar": 22
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_efda9a16",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 158,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-02-23T16:42:55Z",
      "side": 1,
      "message": "Agree ... i will describe these scenarios when i update this section with the Nova Proxy architecture",
      "parentUuid": "dabed58f_f457d324",
      "range": {
        "startLine": 155,
        "startChar": 3,
        "endLine": 158,
        "endChar": 22
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_b4187b85",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 182,
      "author": {
        "id": 314
      },
      "writtenOn": "2017-02-23T08:07:00Z",
      "side": 1,
      "message": "who should take action when the peer state message fails? should such situation be uploaded to the VNFM?",
      "range": {
        "startLine": 182,
        "startChar": 0,
        "endLine": 182,
        "endChar": 40
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_af04a27e",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 182,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-02-23T16:42:55Z",
      "side": 1,
      "message": "Not sure i understand the question.\nThe messaging is a datagram / connectionless messaging service between VMs, so it is the responsibility of the Application within the VM to simply re-try if the message it sent is not responded to.",
      "parentUuid": "dabed58f_b4187b85",
      "range": {
        "startLine": 182,
        "startChar": 0,
        "endLine": 182,
        "endChar": 40
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1acb0d3e_b1a646c0",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 1334
      },
      "writtenOn": "2017-02-09T11:20:10Z",
      "side": 1,
      "message": "Who is supposed to be the user of the API? IN NFV guests(VNFs) do not decide about scaling by themselves",
      "range": {
        "startLine": 218,
        "startChar": 3,
        "endLine": 219,
        "endChar": 59
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_125ad283",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-02-14T13:49:56Z",
      "side": 1,
      "message": "Agree having VNFM trigger Resource Scaling at a high-level, is one scenario.   Using Heat policy-driven resource scaling is another high-level scenario.\n\nAgain, this document is talking about VM Resource Scaling at a lower level ... i.e. the OpenStack-Host - to - Guest-VM messaging required to realize resource scaling.\n\nIn our implementation, this OpenStack-Host - to - Guest-VM API for realizing Resource Scaling is used by a NOVA extension to request a resource scale up or scale down.  \ne.g.      % nova scale \u003cinstance_UUID\u003e cpu up\n            % nova scale \u003cinstance_UUID\u003e cpu down\n\nThis command can be triggered by either VNFM or HEAT Scaling Policy.\nAnd then this command leverages the HOST-to-GUEST API for Resource Scaling to inform the Guest of the Resource Scaling such that it can do the appropriate on-lining / off-lining of cores and any required changes to core affinity.",
      "parentUuid": "1acb0d3e_b1a646c0",
      "range": {
        "startLine": 218,
        "startChar": 3,
        "endLine": 219,
        "endChar": 59
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_fd64afe6",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 830
      },
      "writtenOn": "2017-02-14T15:23:16Z",
      "side": 1,
      "message": "This just reinforces two of my comments above about 1) separating out the host-guest message service with these capabilities from the overall intent of the service, and 2) this is actually a Nova-based service running on the host that responds to consumers like VNFM or Heat.",
      "parentUuid": "dabed58f_125ad283",
      "range": {
        "startLine": 218,
        "startChar": 3,
        "endLine": 219,
        "endChar": 59
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_fe3d85bc",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-02-15T12:32:23Z",
      "side": 1,
      "message": "Agreed ... will reflect that in the info to be added in the \"who is the consumer and how does this integrate into OpenStack / OPNFV / MANO\" update to the Overview Doc.",
      "parentUuid": "dabed58f_fd64afe6",
      "range": {
        "startLine": 218,
        "startChar": 3,
        "endLine": 219,
        "endChar": 59
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1acb0d3e_f1160ef1",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 317,
      "author": {
        "id": 1334
      },
      "writtenOn": "2017-02-09T11:20:10Z",
      "side": 1,
      "message": "How can a guest API be used to overcome split brain? Do you assume that applications have their own cluster management? How to synchronize with OpenStack?",
      "range": {
        "startLine": 317,
        "startChar": 40,
        "endLine": 317,
        "endChar": 51
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_325fd674",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 317,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-02-14T13:49:56Z",
      "side": 1,
      "message": "Yes ... we have found that the majority of applications on OpenStack are existing applications that have full HA solutions in the physical world ... and would like to continue using those solutions in the virtual world.\n\nSo yes, i am assuming that the Guest VMs implementing (say) a 1:1 HA group would be running some clustering software running over Tenant Networking.  Then this Messaging path thru the HOST between the VMs provides a completely independent messaging path which can be used to eliminate potential split brain scenarios.",
      "parentUuid": "1acb0d3e_f1160ef1",
      "range": {
        "startLine": 317,
        "startChar": 40,
        "endLine": 317,
        "endChar": 51
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_ddae8be7",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 2
      },
      "lineNbr": 317,
      "author": {
        "id": 830
      },
      "writtenOn": "2017-02-14T15:23:16Z",
      "side": 1,
      "message": "I must be missing something, because this seemed to create opportunity for additional split-brain scenarios. If this is implemented so that using it is both transparent if not used, and must be enabled during VM deployment, then ok. Because if enabled by the VNFM, then it knows that the deployed VM will behave a certain way. VM behavior per expectations is fundamental to ensure reliable resource M\u0026O.",
      "parentUuid": "dabed58f_325fd674",
      "range": {
        "startLine": 317,
        "startChar": 40,
        "endLine": 317,
        "endChar": 51
      },
      "revId": "211c02df22242e7f149dc4066aeb837a714bc241",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    }
  ]
}