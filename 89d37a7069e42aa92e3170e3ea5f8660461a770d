{
  "comments": [
    {
      "key": {
        "uuid": "dabed58f_ee65b245",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 830
      },
      "writtenOn": "2017-03-01T22:27:21Z",
      "side": 1,
      "message": "What is the short and long term intended implementation here? This may have impact on what is written, but especially on understanding what is being proposed. \nIs the intent to add capabilities to the Nova REST API, and a Nova Proxy is a just a short term addition by OPNFV to delivery the same functionality? If so, then you have a consistency/maintenance issue whereby you will be revving that proxy for every release until it is finally in Nova.  Or is the intent to create a permanent OPNFV  Nova Proxy? The former is painful and we should gain approval of blueprint from Nova before proceeding. The latter seems like a non-starter. Isn\u0027t it possible to simply extend the Nova API rather than proxy? Which call(s) need to change behavior? There should be a strong preference to simply extending the existing API, even if it means using a similar, but new, API to create the difference in whatever you are doing.",
      "range": {
        "startLine": 159,
        "startChar": 3,
        "endLine": 159,
        "endChar": 82
      },
      "revId": "89d37a7069e42aa92e3170e3ea5f8660461a770d",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_fc09e32c",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 314
      },
      "writtenOn": "2017-03-07T08:19:28Z",
      "side": 1,
      "message": "My suggestion would be to use this nova proxy first before we can get this included in nova, so that we can enjoy this API quickly in the releases of OPNFV.",
      "parentUuid": "dabed58f_ee65b245",
      "range": {
        "startLine": 159,
        "startChar": 3,
        "endLine": 159,
        "endChar": 82
      },
      "revId": "89d37a7069e42aa92e3170e3ea5f8660461a770d",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_72ef57b1",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-03-09T12:28:21Z",
      "side": 1,
      "message": "I hear what you are saying.  Our current product bears the pain of revving our changes around NOVA for every new release of openstack that we support.  Although for the NOVA PROXY in particular, I don\u0027t believe it is that sensitive to changes in NOVA REST API syntax or behaviour ... HOWEVER, i am following up on that with our NOVA designers.   \n\nThe reason i say NOVA PROXY is not that sensitive to NOVA changes is that the NOVA PROXY is really just a generic command front end that notifies the target that the command is about to be sent to him.  NOVA PROXY only looks at the URL of the REST API Command to determine the base command, it looks at nothing else and does not do any processing related to the command at all.  It simply notifies the target that this command is about to happen and either drops the command if it receives and out-of-service warning, otherwise allows the command (unaltered) to pass on to NOVA.  In theory, it could be used as a proxy to any service.",
      "parentUuid": "dabed58f_ee65b245",
      "range": {
        "startLine": 159,
        "startChar": 3,
        "endLine": 159,
        "endChar": 82
      },
      "revId": "89d37a7069e42aa92e3170e3ea5f8660461a770d",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_b23cef30",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-03-09T12:28:21Z",
      "side": 1,
      "message": "I would be ok in positioning the NOVA PROXY as experimental / possibly-temporary in the OPNFV architecture ... subject to a decision as to whether its NOVA dependency is too large a code maintenance effort and should be re-worked as an extension to the NOVA APIs.",
      "parentUuid": "dabed58f_fc09e32c",
      "range": {
        "startLine": 159,
        "startChar": 3,
        "endLine": 159,
        "endChar": 82
      },
      "revId": "89d37a7069e42aa92e3170e3ea5f8660461a770d",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_0e4e06c2",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 3
      },
      "lineNbr": 167,
      "author": {
        "id": 830
      },
      "writtenOn": "2017-03-01T22:27:21Z",
      "side": 1,
      "message": "If this is synchronous, (figure 2 implies the proxy waits until VM responds, then calls Nova) then what happens if the VM fails to respond? It says timeout below - so you\u0027ll ensure that you have a sufficiently short timeout that it won\u0027t impact ability of Nova to complete its transaction. How will you test this in the API path? Are we going to re-create the Tempest test environment?",
      "range": {
        "startLine": 166,
        "startChar": 25,
        "endLine": 167,
        "endChar": 82
      },
      "revId": "89d37a7069e42aa92e3170e3ea5f8660461a770d",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_f28827e9",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 3
      },
      "lineNbr": 167,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-03-09T12:28:21Z",
      "side": 1,
      "message": "Yes, its synchronous from an individual transaction basis.   Although different transactions are asynchronous with each other ... i.e. a slow responding Guest VM does NOT block NOVA PROXY from processing other commands targeted at other VMs.\n\nI believe we use the NOVA Tempest Test Environment \u0027as is\u0027 ... with no changes.  NOVA PROXY is transparent to the outside world.   ( I will double check this with our design ... but pretty sure this is true. )",
      "parentUuid": "dabed58f_0e4e06c2",
      "range": {
        "startLine": 166,
        "startChar": 25,
        "endLine": 167,
        "endChar": 82
      },
      "revId": "89d37a7069e42aa92e3170e3ea5f8660461a770d",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_aed6dac3",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 3
      },
      "lineNbr": 178,
      "author": {
        "id": 830
      },
      "writtenOn": "2017-03-01T22:27:21Z",
      "side": 1,
      "message": "Is there an application that is demanding this functionality because of previous failures? If not, it may be hard to get Nova to buy in.",
      "range": {
        "startLine": 170,
        "startChar": 10,
        "endLine": 178,
        "endChar": 22
      },
      "revId": "89d37a7069e42aa92e3170e3ea5f8660461a770d",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dabed58f_727437fd",
        "filename": "Support_For_HA_Guest_APIs/OPNFV_HA_Guest_APIs-Overview_HLD.rst",
        "patchSetId": 3
      },
      "lineNbr": 178,
      "author": {
        "id": 6367
      },
      "writtenOn": "2017-03-09T12:28:21Z",
      "side": 1,
      "message": "We have customers / end-users of our product that are leveraging this functionality.\n\ne.g. just recently we had a customer whose VM was typically so busy that it was impossible for it to live-migrate as its memory was changing faster than could be synchronized.  It leveraged this functionality in order to temporarily offload when a live-migrate was about to occur.",
      "parentUuid": "dabed58f_aed6dac3",
      "range": {
        "startLine": 170,
        "startChar": 10,
        "endLine": 178,
        "endChar": 22
      },
      "revId": "89d37a7069e42aa92e3170e3ea5f8660461a770d",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    }
  ]
}